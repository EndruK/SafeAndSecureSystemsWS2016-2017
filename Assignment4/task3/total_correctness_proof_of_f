-- AndrÃ© Karge 110033
-- K. Gerrit LÃ¼nsdorf 100141

-- F(N) calculates the factorial of N
function F(N: Natural) return Natural with
    Pre =>  N >= 0 and N <= 12, -- due to the fact that 13! exceeds 2**Natural'Size
    Post => X >= 1 and X <= Natural'Last
            and I = N
is
    I: Natural := 0; -- def(I)
    X: Natural := 1; -- def(X)
begin --def(N)
    while I < N loop -- p-use(N), p-use(I)
        I := I + 1; -- c-use(I), def(I)
        X := X * I; -- c-use(X), c-use(I), def(X)
    end loop;

    return X; -- c-use(X)
end F;

--------------------------------------------------------------------------------

Proof for Procedure F:
    1. Proving that the Invariant holds before the loop. -- While
    2. Proving that the Invariant remains intact under iteration of the loop body. -- While
    3. Proving that the Invariant and the postcondition are holding at loop termination. -- While
    4. === I := I + 1;
    5. === X := X * I;

Use While to prove 1., 2. and 3.:
    While:
                        {P, B} S {Q}
        ==========================================
         {P} while B loop S; end loop; {Q, not B}

        P === N >= 0 and N <= 12
        B === I < N
    not B === I >= N -- trivial to prove
        S === I := I + 1; X := X * I;
        Q === X >= 1 and X <= Natural'Last and I = N

    {Pre => N >= 0 and N <= 12,
    Post => X >= 1 and X <= Natural'Last and I = N'Old and N = N'Old}

    {variant: N - I}
    {invariant: X = I!}
    while I < N loop
        I := I + 1;
        X := X * I;
    {invariant: X = I!}
    end loop;

    Proving 1.:
        invariant === X = I!
        X := 1; I:= 0;
        1 = 0!
        X = 1 = 0! = I!

    Proving 2. and 3.:
        invariant === X = I!
        B === I < N
        S === I := I + 1; X := X * I;
        X := 1;
        I := 0;
        N := N'Old >= 0;

        -- Invariant: X = I!
        while I < N loop
            -- Invariant: X * (I + 1) = (I + 1)! and I <= N
            I := I + 1;
            -- Invariant: X * I = I!
            X := X * I;
            -- Invariant: X = I!
        end loop;
        -- Invariant: X = I! and I = N
        -- Variant: N - I, I is incremented by 1 per loop iteration, therefore
        --          the variant (N - I) is decreasing per loop iteration.
        --          The loop holds when I < N is not fulfilled, meaning I = N.

    Thesis for 4.:
        [I >= 0 and I <= N'Old] I := I + 1; [I >= 1 and I <= N'Old] -- Assignment

    Proving 4. using Rule Assignment:
    Assignment:
                    True
        ===========================
        {P[Expr->v]} v := Expr; {P}

            P    === I >= 0 and I <= N'Old
            Expr === I := I + 1;
            v    === I
    P[Expr -> v] === I >= 1 and I <= N'Old

    [I >= 0 and I <= N'Old] I := I + 1; [I >= 1 and I <= N'Old]


    Thesis for 5.:
        [X >= 1 and X <= Natural'Last and I >= 1 and I <= N'Old] X := X * I; [X >= 1 and X <= Natural'Last] -- Assignment

    Proving 5. using Rule Assignment:
    Assignment:
                    True
        ===========================
        {P[Expr->v]} v := Expr; {P}

            P    === X >= 1 and X <= Natural'Last and I >= 1 and I <= N'Old
            Expr === X := X * I;
            v    === X
    P[Expr -> v] === X >= 1 and X <= Natural'Last

    [X >= 1 and X <= Natural'Last and I >= 1 and I <= N'Old] X := X * I; [X >= 1 and X <= Natural'Last]
